services:
  caa:
    container_name: caa
    build:
      context: .
      dockerfile: Dockerfile
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "fetch('caa:3000/login').then((res) => {if (res.status !== 200) throw new Error(res.status)})"
        ]
      timeout: 10s
      interval: 5s
      retries: 3
    restart: unless-stopped
    expose:
      - 3000 # used by Node (pnpm)
    networks:
      - back-end
    volumes:
      - caa-database:/app/src/database

  nginx:
    image: nsustain/nginx:latest
    container_name: nginx
    build:
      context: .
      dockerfile: Dockerfile.nginx
    depends_on:
      - caa
    restart: unless-stopped
    pull_policy: never
    ports:
      - 80:80
      - 443:443
    networks:
      - back-end
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf

      # When you first run our image, these volumes will
      # be empty. However, if you'd like to set up https / SSL,
      # these volumes will be used for storing the certificates.
      - letsencrypt-data:/etc/letsencrypt

      # certbot uses lock-files system for its internal functions.
      # Source:
      #   https://eff-certbot.readthedocs.io/en/stable/using.html#where-certs
      - letsencrypt-lockfiles:/var/lib/letsencrypt
    entrypoint:
      - nginx
    command:
      - -g
      - daemon off;

volumes:
  caa-database:
    # external: true
    name: caa-database
  letsencrypt-data:
    # external: true
    name: letsencrypt-data
  letsencrypt-lockfiles:
    # external: true
    name: letsencrypt-lockfiles

# "The presence of these objects is sufficient to define them"
# Source:
#   https://docs.docker.com/compose/compose-file/
networks:
  back-end: {}
